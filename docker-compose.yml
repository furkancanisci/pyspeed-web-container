version: '3.8'

services:
  # PySpeed Flask Application
  pyspeed-flask:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pyspeed-flask-app
    ports:
      - "8080:8080"
    volumes:
      - ./config:/app/config:ro
      - ./static:/app/static:rw
      - ./logs:/app/logs:rw
    environment:
      - PYSPEED_WORKERS=4
      - PYSPEED_LOG_LEVEL=INFO
      - PYSPEED_CONFIG_FILE=/app/config/pyspeed.json
    command: ["python3", "examples/flask_app/pyspeed_app.py"]
    networks:
      - pyspeed-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PySpeed FastAPI Application
  pyspeed-fastapi:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pyspeed-fastapi-app
    ports:
      - "8081:8080"
    volumes:
      - ./config:/app/config:ro
      - ./static:/app/static:rw
      - ./logs:/app/logs:rw
    environment:
      - PYSPEED_WORKERS=4
      - PYSPEED_LOG_LEVEL=INFO
      - PYSPEED_PORT=8080
    command: ["python3", "examples/fastapi_app/pyspeed_app.py"]
    networks:
      - pyspeed-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Load Balancer (nginx)
  nginx-lb:
    image: nginx:alpine
    container_name: pyspeed-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static:/usr/share/nginx/html/static:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - pyspeed-flask
      - pyspeed-fastapi
    networks:
      - pyspeed-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis-cache:
    image: redis:7-alpine
    container_name: pyspeed-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - pyspeed-network
    restart: unless-stopped

  # PostgreSQL database (optional)
  postgres-db:
    image: postgres:15-alpine
    container_name: pyspeed-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pyspeed_app
      - POSTGRES_USER=pyspeed
      - POSTGRES_PASSWORD=pyspeed_secure_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - pyspeed-network
    restart: unless-stopped

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: pyspeed-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - pyspeed-network
    restart: unless-stopped

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: pyspeed-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=pyspeed_admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - pyspeed-network
    restart: unless-stopped

networks:
  pyspeed-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data: